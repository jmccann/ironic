#!/bin/bash

# Source creds
. /opt/stack/devstack/openrc admin admin

# Setup networking
sed -i -r -e 's/^type_drivers = .*/type_drivers = flat/g' /etc/neutron/plugins/ml2/ml2_conf.ini
sed -i -r -e 's/^mechanism_drivers = .*/mechanism_drivers = openvswitch/g' /etc/neutron/plugins/ml2/ml2_conf.ini
sed -i -r -e 's/^tenant_network_types = .*/tenant_network_types = flat/g' /etc/neutron/plugins/ml2/ml2_conf.ini
sed -i -r -e 's/^# flat_networks =.*/flat_networks = physnet1/g' /etc/neutron/plugins/ml2/ml2_conf.ini
sed -i -r -e 's/^# network_vlan_ranges =.*/network_vlan_ranges = physnet1/g' /etc/neutron/plugins/ml2/ml2_conf.ini
sed -i -r -e 's/^# enable_security_group =.*/enable_security_group = True/g' /etc/neutron/plugins/ml2/ml2_conf.ini
if [[ $(grep -c 'bridge_mappings = physnet1:br-eth1' /etc/neutron/plugins/ml2/ml2_conf.ini) -eq 0 ]]; then
  sed -i -r -e 's/^\[ovs\]/\[ovs\]\nbridge_mappings = physnet1:br-eth1/g' /etc/neutron/plugins/ml2/ml2_conf.ini
fi
if [[ $(egrep -c '^bridge_mappings = physnet1:br-eth1' /opt/stack/neutron/etc/neutron/plugins/openvswitch/ovs_neutron_plugin.ini) -eq 0 ]]; then
  sed -i -r -e 's/^\[ovs\]/\[ovs\]\nbridge_mappings = physnet1:br-eth1/g' /opt/stack/neutron/etc/neutron/plugins/openvswitch/ovs_neutron_plugin.ini
fi

sudo ovs-vsctl add-br br-eth1
sudo ovs-vsctl add-port br-eth1 eth1

# Restart Open vSwitch agent (q-agt)
screen -S stack -X at q-agt stuff $'\003' # Ctrl-C
screen -S stack -X at q-agt stuff $'\033[A' # Up arrow (for prev command)
screen -S stack -X at q-agt stuff $'\015' # Enter

# Create new net and subnet
TENANT_ID=admin
NETWORK_CIDR=192.168.50.0/24
SUBNET_NAME=barenet
GATEWAY_IP=192.168.50.1
START_IP=192.168.50.100
END_IP=192.168.50.200

neutron net-create --tenant-id $TENANT_ID sharednet1 --shared \
--provider:network_type flat --provider:physical_network physnet1

neutron subnet-create sharednet1 $NETWORK_CIDR --name $SUBNET_NAME \
--ip-version=4 --gateway=$GATEWAY_IP --allocation-pool \
start=$START_IP,end=$END_IP --enable-dhcp

# Some interface config cleanup
sudo ifconfig eth1 up
sudo ifconfig br-eth1 192.168.50.1 netmask 255.255.255.0 up

# Update ironic to use new network for cleaning
clean_net=$(neutron net-list | egrep "sharednet1"'[^-]' | awk '{print $2}')
sed -i -r -e "s/^cleaning_network_uuid =.*/cleaning_network_uuid = $clean_net/g" /etc/ironic/ironic.conf

# Update ironic to be able to use swift for agent based deploy
swift_user=$(swift --os-username=service:glance-swift stat -v | grep -i url | grep -i storage | awk -F\/ '{print $NF}')
swift_key=$(swift --os-username=service:glance-swift stat -v | grep -i url | grep -i key | awk '{print $3}')
swift_url=$(swift --os-username=service:glance-swift stat -v | grep -i url | grep -i storage | awk '{print $2}' | sed -r -e 's~(https*://[0-9\.]+[\:0-9]*).*~\1~g')
sed -i -r -e "s/^#swift_temp_url_key=.*/swift_temp_url_key=$swift_key/g" /etc/ironic/ironic.conf
sed -i -r -e "s/^#swift_account=.*/swift_account=$swift_user/g" /etc/ironic/ironic.conf
sed -i -r -e "s~^#swift_endpoint_url=.*~swift_endpoint_url=$swift_url~g" /etc/ironic/ironic.conf

# Restart ironic conductor
screen -S stack -X at ir-cond stuff $'\003' # Ctrl-C
screen -S stack -X at ir-cond stuff $'\033[A' # Up arrow (for prev command)
screen -S stack -X at ir-cond stuff $'\015' # Enter

# Add agent deploy image
if [[ ! -f coreos_production_pxe.vmlinuz ]]; then
  wget http://tarballs.openstack.org/ironic-python-agent/coreos/files/coreos_production_pxe.vmlinuz
fi
if [[ ! -f coreos_production_pxe_image-oem.cpio.gz ]]; then
  wget http://tarballs.openstack.org/ironic-python-agent/coreos/files/coreos_production_pxe_image-oem.cpio.gz
fi
glance image-create --name ir-deploy-agent.kernel --disk-format aki --container-format aki < coreos_production_pxe.vmlinuz
glance image-create --name ir-deploy-agent.initramfs --disk-format ari --container-format ari < coreos_production_pxe_image-oem.cpio.gz

# Create a new node in ironic
MAC_ADDRESS='08:00:27:6E:DF:70' # Set from baremetal_vm.sh

<% if node['ironic']['agent'] == 'pxe_vbox' %>
IMG_SRC=$(glance image-list | egrep 'uec ' | awk '{print $2}') # For pxe_vbox
IMG_KERN=$(glance image-list | egrep 'ir-deploy-pxe_ssh.kernel ' | awk '{print $2}') # ir-deploy for pxe_vbox
IMG_RAM=$(glance image-list | egrep 'ir-deploy-pxe_ssh.initramfs ' | awk '{print $2}') # ir-deploy for pxe_vbox
NODE_UUID=$(ironic node-create -n my-baremetal -d pxe_vbox -i virtualbox_host='10.0.2.2' -i virtualbox_vmname='baremetal' | grep uuid | awk '{print $4}' | head -1)
<% else %>
IMG_SRC=$(glance image-list | egrep -- '-disk ' | awk '{print $2}') # For agent_vbox
IMG_KERN=$(glance image-list | egrep 'ir-deploy-agent.kernel ' | awk '{print $2}') # ir-deploy for agent_vbox
IMG_RAM=$(glance image-list | egrep 'ir-deploy-agent.initramfs ' | awk '{print $2}') # ir-deploy for agent_vbox
NODE_UUID=$(ironic node-create -n my-baremetal -d agent_vbox -i virtualbox_host='10.0.2.2' -i virtualbox_vmname='baremetal' | grep uuid | awk '{print $4}' | head -1)
<% end %>

RAM_MB=4096
CPU=1
DISK_GB=11
ARCH=x86_64

ironic node-update $NODE_UUID add \
properties/cpus=$CPU \
properties/memory_mb=$RAM_MB \
properties/local_gb=$DISK_GB \
properties/cpu_arch=$ARCH

ironic node-update $NODE_UUID add instance_info/root_gb=11
ironic node-update $NODE_UUID add instance_info/image_source=$IMG_SRC
ironic node-update $NODE_UUID add driver_info/deploy_kernel=$IMG_KERN
ironic node-update $NODE_UUID add driver_info/deploy_ramdisk=$IMG_RAM

ironic port-create -n $NODE_UUID -a $MAC_ADDRESS

# Create new flavor in nova for baremetal
RAM_MB=4096
CPU=1
DISK_GB=11
ARCH=x86_64

nova flavor-create my-baremetal-flavor auto $RAM_MB $DISK_GB $CPU
nova flavor-key my-baremetal-flavor set cpu_arch=$ARCH

# Delete extra nodes
for n in $(ironic node-list | awk '$4 == "None" {print $2}')
do
  ironic node-delete $n
done

# Wait until nova sees the new hypervisor
for n in $(seq 0 120) # Lets not endlessly loop
do
  if [[ $(nova hypervisor-list | grep $NODE_UUID | grep -c enabled) -gt 0 ]]; then
    break # Hypervisor is up
  fi
  echo "Waiting for nova to see the hypervisor ($n) ..."
  sleep 1
done
